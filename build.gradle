plugins {
    id "dev.architectury.loom" version "1.7-SNAPSHOT"
}

def loader = property("loom.platform")
def isFabric = loader == "fabric"
def mcVersion = property("deps.minecraft")

version = property("mod.version") + "-" + mcVersion
group = "dev.imb11"

base {
    archivesName = property("mod.name") + "-" + loader
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    file('src/main/generated')
            ]
        }
    }
}

afterEvaluate {
    stonecutter {
        def platform = property("loom.platform")
        stonecutter.const("fabric", platform == "fabric")
        stonecutter.const("forge", platform == "forge")
        stonecutter.const("neoforge", platform == "neoforge")
    }
}

loom {
    // TODO: Add a better multi-version AW strategy: https://github.com/IMB11/Sounds/blob/main/build.gradle#L86
    accessWidenerPath = getRootProject().file('src/main/resources/fog.accesswidener')

    if (loader == "forge") {
        forge {
            convertAccessWideners = true
            mixinConfig "fog.mixins.json"
        }
    }

    if (loader == "fabric" && mcVersion == "1.21.1") {
        runs {
            datagenClient {
                client()
                name "Data Generation Client"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.output-dir=" + getRootDir().toPath().resolve("src/main/generated")
                vmArg "-Dfabric-api.datagen.modid=fog"

                ideConfigGenerated = false
                runDir "build/datagen"
            }
        }
    }

    runs {
        remove server
    }

    runConfigs.all {
        ideConfigGenerated = true
        runDir "../../run"
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    mavenCentral()
    mavenLocal()
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.imb11.dev/releases' }
    maven { url "https://maven.neoforged.net/releases/" }
    maven {
        name = "Kotlin For Forge"
        url = "https://thedarkcolour.github.io/KotlinForForge"
        content { includeGroup "thedarkcolour" }
    }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url 'https://maven.terraformersmc.com/releases' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

tasks.register('buildAndCollect', Copy) {
    group = "build"
    from(tasks.remapJar.archiveFile)
    into(rootProject.layout.buildDirectory.file("libs"))
    dependsOn("build")
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${property("deps.minecraft")}"
    mappings(loom.layered {
        mappings("net.fabricmc:yarn:${property("deps.yarn")}:v2")
        if (stonecutter.eval(mcVersion, ">=1.20.6")) {
            mappings("dev.architectury:yarn-mappings-patch-neoforge:${mcVersion.replace("1.21.1", "1.21")}+build.4")
        }
    })

    modImplementation(include("dev.architectury:architectury-${loader}:${property("deps.arch_api")}"))
    modImplementation "dev.imb11:mru:${property("deps.mru")}+${mcVersion.replace("1.21.1", "1.21")}+${loader}"

    if (isFabric) {
        System.out.println(loader)
        modImplementation("net.fabricmc:fabric-loader:${property("deps.fabric_loader")}")

        modImplementation("net.fabricmc.fabric-api:fabric-api:${property("runtime.fabric_api")}")
        modImplementation("maven.modrinth:modmenu:${property("deps.mod_menu")}")

        modImplementation "dev.isxander:yet-another-config-lib:${property("deps.yacl")}-${loader}"
    } else {
        // YACL stuff
        modImplementation "dev.isxander:yet-another-config-lib:${property("deps.yacl")}-${loader}"

        if (loader == "forge") {
            "forge"("net.minecraftforge:forge:${mcVersion}-${property("deps.fml")}")
            compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
            implementation(include("io.github.llamalad7:mixinextras-forge:0.4.0"))
        } else {
            "neoForge"("net.neoforged:neoforge:${property("deps.neoforge")}")
        }
    }
}

processResources {
    def props = [
            mod_version     : version,
            target_minecraft: project.property("mod.target"),
            target_mru      : project.property("deps.mru") + "+" + mcVersion + "+" + loader,
    ]

    if (loader == "forge" || loader == "neoforge") {
        props.target_loader = project.property("fml.target")
        props.loader = loader
        props.mandatory_inclusion_field = (loader == "forge") ? "mandatory = true" : "type = \"required\""
    }

    if (loader == "fabric") {
        props.target_architectury = project.property("deps.arch_api")
    }

    props.each { key, value -> inputs.property(key, value) }

    if (loader == "fabric") {
        filesMatching("fabric.mod.json") { expand(props) }
        exclude(["META-INF/mods.toml"])
    }

    if (loader == "forge" || loader == "neoforge") {
        filesMatching(["META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) { expand(props) }
        exclude("fabric.mod.json")

        if (stonecutter.eval(mcVersion, ">1.20.4")) {
            exclude("META-INF/mods.toml")
        } else {
            exclude("META-INF/neoforge.mods.toml")
        }
    }
}

java {
    var version = stonecutter.eval(mcVersion, ">1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}
